services:
  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    ports:
      - 80:80
      - 443:443
    environment:
      - CADDY_INGRESS_NETWORKS=caddy
    networks:
      - caddy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - caddy_data:/data
    restart: unless-stopped

  minio:
    networks:
      - caddy
    labels:
      caddy_0: minio-api.${HOST}
      caddy_0.reverse_proxy: "{{upstreams 9000}}"
      caddy_1: minio.${HOST}
      caddy_1.reverse_proxy: "{{upstreams 9001}}"

  migrate:
    build:
      context: ./backend
    depends_on:
      - db
    networks:
      - zapdiviser
    command: ["sh", "-c", "node ./node_modules/typeorm/cli -d ./dist/ormconfig.js migration:run"]
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  frontend:
    build:
      context: ./frontend
    command: --brotli
    networks:
      - zapdiviser
      - caddy
    depends_on:
      - backend
    environment:
      VITE_BACKEND_URL: backend.${HOST}
    labels:
      caddy_0: app.${HOST}
      caddy_0.reverse_proxy: "{{upstreams 8080}}"
      caddy_1: ${HOST}
      caddy_1.rewrite: "* /zapdiviser{uri}"
      caddy_1.reverse_proxy: https://contingenciainfinita.com
      caddy_1.reverse_proxy.0_header_up: Host contingenciainfinita.com
      caddy_1.reverse_proxy.1_header_up: Alt-Used contingenciainfinita.com
      caddy_2: www.${HOST}
      caddy_2.redir: https://${HOST}{uri}

  backend:
    build:
      context: ./backend
    networks:
      - zapdiviser
      - caddy
    depends_on:
      - db
      - redis
      - minio
    environment:
      HOST: ${HOST}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_USER: ${MINIO_USER}
      MINIO_PASSWORD: ${MINIO_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      caddy_0: backend.${HOST}
      caddy_0.reverse_proxy: "{{upstreams 8000}}"
      caddy_1: webhook.${HOST}
      caddy_1.rewrite: "* /api/product/webhook{uri}"
      caddy_1.reverse_proxy: "{{upstreams 8000}}"
      caddy_2: redirect.${HOST}
      caddy_2.rewrite: "* /api/redirects{uri}"
      caddy_2.reverse_proxy: "{{upstreams 8000}}"
      caddy_3: admin.${HOST}
      caddy_3.redir: "/ /admin-br"
      caddy_3.reverse_proxy: "{{upstreams 8000}}"

  portainer:
    image: portainer/portainer-ce
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=portainer.${HOST}
    networks:
      - caddy
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      caddy: portainer.${HOST}
      caddy.reverse_proxy: "{{upstreams 9000}}"

  loki:
    image: grafana/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - zapdiviser

  grafana:
    image: grafana/grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - caddy
      - zapdiviser
    labels:
      caddy: grafana.${HOST}
      caddy.reverse_proxy: "{{upstreams 3000}}"

  backup:
    image: tiredofit/db-backup
    environment:
      TIMEZONE: America/Sao_Paulo
      CONTAINER_ENABLE_MONITORING: FALSE
      DEFAULT_COMPRESSION_LEVE: 19
      DEFAULT_S3_BUCKET: zapdiviser
      DEFAULT_S3_KEY_ID: ${MINIO_ACCESS_KEY}
      DEFAULT_S3_KEY_SECRET: ${MINIO_SECRET_KEY}
      DEFAULT_S3_HOST: minio:9000
      DB01_TYPE: postgres
      DB01_HOST: db
      DB01_NAME: ${POSTGRES_DB}
      DB01_USER: ${POSTGRES_USER}
      DB01_PASS: ${POSTGRES_PASSWORD}
      DB01_CLEANUP_TIME: 10080
      DB01_CHECKSUM: NONE
      DB02_TYPE: redis
      DB02_HOST: redis-node-1
      DB02_CLEANUP_TIME: 10080
      DB02_CHECKSUM: NONE
      DB03_TYPE: redis
      DB03_HOST: redis-node-2
      DB03_CLEANUP_TIME: 10080
      DB03_CHECKSUM: NONE
      DB04_TYPE: redis
      DB04_HOST: redis-node-3
      DB04_CLEANUP_TIME: 10080
      DB04_CHECKSUM: NONE
      DB05_TYPE: redis
      DB05_HOST: redis-node-4
      DB05_CLEANUP_TIME: 10080
      DB05_CHECKSUM: NONE
      DB06_TYPE: redis
      DB06_HOST: redis-node-5
      DB06_CLEANUP_TIME: 10080
      DB06_CHECKSUM: NONE
      DB07_TYPE: redis
      DB07_HOST: redis-node-6
      DB07_CLEANUP_TIME: 10080
      DB07_CHECKSUM: NONE
    restart: always
  networks:
    - internal

networks:
  caddy:
    external: true
  zapdiviser:
    external: true

volumes:
  caddy_data:
  portainer:
  grafana:
