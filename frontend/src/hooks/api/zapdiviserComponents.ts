/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useZapdiviserContext, ZapdiviserContext } from "./zapdiviserContext";
import type * as Fetcher from "./zapdiviserFetcher";
import { zapdiviserFetch } from "./zapdiviserFetcher";
import type * as Schemas from "./zapdiviserSchemas";

export type ProductControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type ProductControllerCreateVariables = {
  body?: Schemas.CreateProductDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerCreate = (
  variables: ProductControllerCreateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerCreateError,
    Schemas.CreateProductDto,
    {},
    {},
    {}
  >({ url: "/api/product", method: "post", ...variables, signal });

export const useProductControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerCreateError,
      ProductControllerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerCreateError,
    ProductControllerCreateVariables
  >({
    mutationFn: (variables: ProductControllerCreateVariables) =>
      fetchProductControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProductControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ProductControllerFindAllVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerFindAll = (
  variables: ProductControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/product", method: "get", ...variables, signal });

export const useProductControllerFindAll = <TData = undefined,>(
  variables: ProductControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ProductControllerFindAllError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<undefined, ProductControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: "/api/product",
      operationId: "productControllerFindAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProductControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProductControllerFindOnePathParams = {
  id: string;
};

export type ProductControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type ProductControllerFindOneVariables = {
  pathParams: ProductControllerFindOnePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerFindOne = (
  variables: ProductControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    Schemas.ProductEntity,
    ProductControllerFindOneError,
    undefined,
    {},
    {},
    ProductControllerFindOnePathParams
  >({ url: "/api/product/{id}", method: "get", ...variables, signal });

export const useProductControllerFindOne = <TData = Schemas.ProductEntity,>(
  variables: ProductControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProductEntity,
      ProductControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<
    Schemas.ProductEntity,
    ProductControllerFindOneError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/product/{id}",
      operationId: "productControllerFindOne",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProductControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProductControllerUpdatePathParams = {
  id: string;
};

export type ProductControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ProductControllerUpdateVariables = {
  body?: Schemas.CreateProductDto;
  pathParams: ProductControllerUpdatePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerUpdate = (
  variables: ProductControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerUpdateError,
    Schemas.CreateProductDto,
    {},
    {},
    ProductControllerUpdatePathParams
  >({ url: "/api/product/{id}", method: "patch", ...variables, signal });

export const useProductControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerUpdateError,
      ProductControllerUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerUpdateError,
    ProductControllerUpdateVariables
  >({
    mutationFn: (variables: ProductControllerUpdateVariables) =>
      fetchProductControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProductControllerDeletePathParams = {
  id: string;
};

export type ProductControllerDeleteError = Fetcher.ErrorWrapper<undefined>;

export type ProductControllerDeleteVariables = {
  pathParams: ProductControllerDeletePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerDelete = (
  variables: ProductControllerDeleteVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerDeleteError,
    undefined,
    {},
    {},
    ProductControllerDeletePathParams
  >({ url: "/api/product/{id}", method: "delete", ...variables, signal });

export const useProductControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerDeleteError,
      ProductControllerDeleteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerDeleteError,
    ProductControllerDeleteVariables
  >({
    mutationFn: (variables: ProductControllerDeleteVariables) =>
      fetchProductControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProductControllerCreateFlowEventError =
  Fetcher.ErrorWrapper<undefined>;

export type ProductControllerCreateFlowEventVariables = {
  body?: Schemas.CreateFlowEventDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerCreateFlowEvent = (
  variables: ProductControllerCreateFlowEventVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerCreateFlowEventError,
    Schemas.CreateFlowEventDto,
    {},
    {},
    {}
  >({ url: "/api/product/flow-event", method: "post", ...variables, signal });

export const useProductControllerCreateFlowEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerCreateFlowEventError,
      ProductControllerCreateFlowEventVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerCreateFlowEventError,
    ProductControllerCreateFlowEventVariables
  >({
    mutationFn: (variables: ProductControllerCreateFlowEventVariables) =>
      fetchProductControllerCreateFlowEvent({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProductControllerCreateMediaUploadUrlPathParams = {
  productId: string;
};

export type ProductControllerCreateMediaUploadUrlError =
  Fetcher.ErrorWrapper<undefined>;

export type ProductControllerCreateMediaUploadUrlVariables = {
  pathParams: ProductControllerCreateMediaUploadUrlPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerCreateMediaUploadUrl = (
  variables: ProductControllerCreateMediaUploadUrlVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerCreateMediaUploadUrlError,
    undefined,
    {},
    {},
    ProductControllerCreateMediaUploadUrlPathParams
  >({
    url: "/api/product/flow-event/upload-file/{productId}",
    method: "post",
    ...variables,
    signal,
  });

export const useProductControllerCreateMediaUploadUrl = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerCreateMediaUploadUrlError,
      ProductControllerCreateMediaUploadUrlVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerCreateMediaUploadUrlError,
    ProductControllerCreateMediaUploadUrlVariables
  >({
    mutationFn: (variables: ProductControllerCreateMediaUploadUrlVariables) =>
      fetchProductControllerCreateMediaUploadUrl({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProductControllerCreateMediaDownloadUrlPathParams = {
  productId: string;
  fileId: string;
};

export type ProductControllerCreateMediaDownloadUrlError =
  Fetcher.ErrorWrapper<undefined>;

export type ProductControllerCreateMediaDownloadUrlVariables = {
  pathParams: ProductControllerCreateMediaDownloadUrlPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerCreateMediaDownloadUrl = (
  variables: ProductControllerCreateMediaDownloadUrlVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerCreateMediaDownloadUrlError,
    undefined,
    {},
    {},
    ProductControllerCreateMediaDownloadUrlPathParams
  >({
    url: "/api/product/flow-event/download-file/{productId}/{fileId}",
    method: "post",
    ...variables,
    signal,
  });

export const useProductControllerCreateMediaDownloadUrl = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerCreateMediaDownloadUrlError,
      ProductControllerCreateMediaDownloadUrlVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerCreateMediaDownloadUrlError,
    ProductControllerCreateMediaDownloadUrlVariables
  >({
    mutationFn: (variables: ProductControllerCreateMediaDownloadUrlVariables) =>
      fetchProductControllerCreateMediaDownloadUrl({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProductControllerUpdateFlowEventPathParams = {
  id: string;
};

export type ProductControllerUpdateFlowEventError =
  Fetcher.ErrorWrapper<undefined>;

export type ProductControllerUpdateFlowEventVariables = {
  body?: Schemas.UpdateFlowEventDto;
  pathParams: ProductControllerUpdateFlowEventPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerUpdateFlowEvent = (
  variables: ProductControllerUpdateFlowEventVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerUpdateFlowEventError,
    Schemas.UpdateFlowEventDto,
    {},
    {},
    ProductControllerUpdateFlowEventPathParams
  >({
    url: "/api/product/flow-event/{id}",
    method: "patch",
    ...variables,
    signal,
  });

export const useProductControllerUpdateFlowEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerUpdateFlowEventError,
      ProductControllerUpdateFlowEventVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerUpdateFlowEventError,
    ProductControllerUpdateFlowEventVariables
  >({
    mutationFn: (variables: ProductControllerUpdateFlowEventVariables) =>
      fetchProductControllerUpdateFlowEvent({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProductControllerDeleteFlowEventPathParams = {
  id: string;
};

export type ProductControllerDeleteFlowEventError =
  Fetcher.ErrorWrapper<undefined>;

export type ProductControllerDeleteFlowEventVariables = {
  pathParams: ProductControllerDeleteFlowEventPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerDeleteFlowEvent = (
  variables: ProductControllerDeleteFlowEventVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerDeleteFlowEventError,
    undefined,
    {},
    {},
    ProductControllerDeleteFlowEventPathParams
  >({
    url: "/api/product/flow-event/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProductControllerDeleteFlowEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerDeleteFlowEventError,
      ProductControllerDeleteFlowEventVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerDeleteFlowEventError,
    ProductControllerDeleteFlowEventVariables
  >({
    mutationFn: (variables: ProductControllerDeleteFlowEventVariables) =>
      fetchProductControllerDeleteFlowEvent({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProductControllerSetWhatsappPathParams = {
  id: string;
};

export type ProductControllerSetWhatsappError = Fetcher.ErrorWrapper<undefined>;

export type ProductControllerSetWhatsappVariables = {
  body?: Schemas.SetWhatsappsDto;
  pathParams: ProductControllerSetWhatsappPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerSetWhatsapp = (
  variables: ProductControllerSetWhatsappVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerSetWhatsappError,
    Schemas.SetWhatsappsDto,
    {},
    {},
    ProductControllerSetWhatsappPathParams
  >({
    url: "/api/product/{id}/whatsapp",
    method: "post",
    ...variables,
    signal,
  });

export const useProductControllerSetWhatsapp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerSetWhatsappError,
      ProductControllerSetWhatsappVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerSetWhatsappError,
    ProductControllerSetWhatsappVariables
  >({
    mutationFn: (variables: ProductControllerSetWhatsappVariables) =>
      fetchProductControllerSetWhatsapp({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProductControllerRemoveWhatsappFromProductPathParams = {
  id: string;
};

export type ProductControllerRemoveWhatsappFromProductError =
  Fetcher.ErrorWrapper<undefined>;

export type ProductControllerRemoveWhatsappFromProductVariables = {
  body?: Schemas.SetWhatsappsDto;
  pathParams: ProductControllerRemoveWhatsappFromProductPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerRemoveWhatsappFromProduct = (
  variables: ProductControllerRemoveWhatsappFromProductVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerRemoveWhatsappFromProductError,
    Schemas.SetWhatsappsDto,
    {},
    {},
    ProductControllerRemoveWhatsappFromProductPathParams
  >({
    url: "/api/product/{id}/whatsapp",
    method: "delete",
    ...variables,
    signal,
  });

export const useProductControllerRemoveWhatsappFromProduct = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerRemoveWhatsappFromProductError,
      ProductControllerRemoveWhatsappFromProductVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerRemoveWhatsappFromProductError,
    ProductControllerRemoveWhatsappFromProductVariables
  >({
    mutationFn: (
      variables: ProductControllerRemoveWhatsappFromProductVariables,
    ) =>
      fetchProductControllerRemoveWhatsappFromProduct({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProductControllerWebhookPathParams = {
  id: string;
};

export type ProductControllerWebhookError = Fetcher.ErrorWrapper<undefined>;

export type ProductControllerWebhookVariables = {
  body?: Schemas.Object;
  pathParams: ProductControllerWebhookPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchProductControllerWebhook = (
  variables: ProductControllerWebhookVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ProductControllerWebhookError,
    Schemas.Object,
    {},
    {},
    ProductControllerWebhookPathParams
  >({ url: "/api/product/webhook/{id}", method: "post", ...variables, signal });

export const useProductControllerWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProductControllerWebhookError,
      ProductControllerWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ProductControllerWebhookError,
    ProductControllerWebhookVariables
  >({
    mutationFn: (variables: ProductControllerWebhookVariables) =>
      fetchProductControllerWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WhatsappControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type WhatsappControllerFindAllResponse = Schemas.WhatsappEntity[];

export type WhatsappControllerFindAllVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchWhatsappControllerFindAll = (
  variables: WhatsappControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    WhatsappControllerFindAllResponse,
    WhatsappControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/whatsapp", method: "get", ...variables, signal });

export const useWhatsappControllerFindAll = <
  TData = WhatsappControllerFindAllResponse,
>(
  variables: WhatsappControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      WhatsappControllerFindAllResponse,
      WhatsappControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<
    WhatsappControllerFindAllResponse,
    WhatsappControllerFindAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/whatsapp",
      operationId: "whatsappControllerFindAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchWhatsappControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type WhatsappControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type WhatsappControllerCreateVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchWhatsappControllerCreate = (
  variables: WhatsappControllerCreateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    Schemas.WhatsappEntity,
    WhatsappControllerCreateError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/whatsapp", method: "post", ...variables, signal });

export const useWhatsappControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WhatsappEntity,
      WhatsappControllerCreateError,
      WhatsappControllerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    Schemas.WhatsappEntity,
    WhatsappControllerCreateError,
    WhatsappControllerCreateVariables
  >({
    mutationFn: (variables: WhatsappControllerCreateVariables) =>
      fetchWhatsappControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WhatsappControllerUpdateCodeError = Fetcher.ErrorWrapper<undefined>;

export type WhatsappControllerUpdateCodeVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchWhatsappControllerUpdateCode = (
  variables: WhatsappControllerUpdateCodeVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    WhatsappControllerUpdateCodeError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/whatsapp/update-code", method: "post", ...variables, signal });

export const useWhatsappControllerUpdateCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WhatsappControllerUpdateCodeError,
      WhatsappControllerUpdateCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    WhatsappControllerUpdateCodeError,
    WhatsappControllerUpdateCodeVariables
  >({
    mutationFn: (variables: WhatsappControllerUpdateCodeVariables) =>
      fetchWhatsappControllerUpdateCode({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WhatsappControllerFindOnePathParams = {
  id: string;
};

export type WhatsappControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type WhatsappControllerFindOneVariables = {
  pathParams: WhatsappControllerFindOnePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchWhatsappControllerFindOne = (
  variables: WhatsappControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    WhatsappControllerFindOneError,
    undefined,
    {},
    {},
    WhatsappControllerFindOnePathParams
  >({ url: "/api/whatsapp/{id}", method: "get", ...variables, signal });

export const useWhatsappControllerFindOne = <TData = undefined,>(
  variables: WhatsappControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      WhatsappControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<undefined, WhatsappControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: "/api/whatsapp/{id}",
      operationId: "whatsappControllerFindOne",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchWhatsappControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type WhatsappControllerRemovePathParams = {
  id: string;
};

export type WhatsappControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type WhatsappControllerRemoveVariables = {
  pathParams: WhatsappControllerRemovePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchWhatsappControllerRemove = (
  variables: WhatsappControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    WhatsappControllerRemoveError,
    undefined,
    {},
    {},
    WhatsappControllerRemovePathParams
  >({ url: "/api/whatsapp/{id}", method: "delete", ...variables, signal });

export const useWhatsappControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WhatsappControllerRemoveError,
      WhatsappControllerRemoveVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    WhatsappControllerRemoveError,
    WhatsappControllerRemoveVariables
  >({
    mutationFn: (variables: WhatsappControllerRemoveVariables) =>
      fetchWhatsappControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WhatsappControllerWebhookError = Fetcher.ErrorWrapper<undefined>;

export type WhatsappControllerWebhookVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchWhatsappControllerWebhook = (
  variables: WhatsappControllerWebhookVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    WhatsappControllerWebhookError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/whatsapp/webhook", method: "post", ...variables, signal });

export const useWhatsappControllerWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WhatsappControllerWebhookError,
      WhatsappControllerWebhookVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    WhatsappControllerWebhookError,
    WhatsappControllerWebhookVariables
  >({
    mutationFn: (variables: WhatsappControllerWebhookVariables) =>
      fetchWhatsappControllerWebhook({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WhatsappControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type WhatsappControllerUpdateVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchWhatsappControllerUpdate = (
  variables: WhatsappControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    WhatsappControllerUpdateError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/whatsapp/update", method: "post", ...variables, signal });

export const useWhatsappControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WhatsappControllerUpdateError,
      WhatsappControllerUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    WhatsappControllerUpdateError,
    WhatsappControllerUpdateVariables
  >({
    mutationFn: (variables: WhatsappControllerUpdateVariables) =>
      fetchWhatsappControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WhatsappControllerCreateWhatsappPathParams = {
  id: string;
};

export type WhatsappControllerCreateWhatsappError =
  Fetcher.ErrorWrapper<undefined>;

export type WhatsappControllerCreateWhatsappVariables = {
  pathParams: WhatsappControllerCreateWhatsappPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchWhatsappControllerCreateWhatsapp = (
  variables: WhatsappControllerCreateWhatsappVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    WhatsappControllerCreateWhatsappError,
    undefined,
    {},
    {},
    WhatsappControllerCreateWhatsappPathParams
  >({
    url: "/api/whatsapp/create-whatsapp/{id}",
    method: "post",
    ...variables,
    signal,
  });

export const useWhatsappControllerCreateWhatsapp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WhatsappControllerCreateWhatsappError,
      WhatsappControllerCreateWhatsappVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    WhatsappControllerCreateWhatsappError,
    WhatsappControllerCreateWhatsappVariables
  >({
    mutationFn: (variables: WhatsappControllerCreateWhatsappVariables) =>
      fetchWhatsappControllerCreateWhatsapp({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ChatControllerSetWhatsappError = Fetcher.ErrorWrapper<undefined>;

export type ChatControllerSetWhatsappVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchChatControllerSetWhatsapp = (
  variables: ChatControllerSetWhatsappVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ChatControllerSetWhatsappError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/chat/set-whatsapp", method: "post", ...variables, signal });

export const useChatControllerSetWhatsapp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChatControllerSetWhatsappError,
      ChatControllerSetWhatsappVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ChatControllerSetWhatsappError,
    ChatControllerSetWhatsappVariables
  >({
    mutationFn: (variables: ChatControllerSetWhatsappVariables) =>
      fetchChatControllerSetWhatsapp({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChatControllerCreateMediaUploadUrlError =
  Fetcher.ErrorWrapper<undefined>;

export type ChatControllerCreateMediaUploadUrlVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchChatControllerCreateMediaUploadUrl = (
  variables: ChatControllerCreateMediaUploadUrlVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ChatControllerCreateMediaUploadUrlError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/chat/upload-file", method: "post", ...variables, signal });

export const useChatControllerCreateMediaUploadUrl = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChatControllerCreateMediaUploadUrlError,
      ChatControllerCreateMediaUploadUrlVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ChatControllerCreateMediaUploadUrlError,
    ChatControllerCreateMediaUploadUrlVariables
  >({
    mutationFn: (variables: ChatControllerCreateMediaUploadUrlVariables) =>
      fetchChatControllerCreateMediaUploadUrl({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ChatControllerSendMessageError = Fetcher.ErrorWrapper<undefined>;

export type ChatControllerSendMessageVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchChatControllerSendMessage = (
  variables: ChatControllerSendMessageVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ChatControllerSendMessageError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/chat/send-message", method: "post", ...variables, signal });

export const useChatControllerSendMessage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChatControllerSendMessageError,
      ChatControllerSendMessageVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ChatControllerSendMessageError,
    ChatControllerSendMessageVariables
  >({
    mutationFn: (variables: ChatControllerSendMessageVariables) =>
      fetchChatControllerSendMessage({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChatControllerGetChatsError = Fetcher.ErrorWrapper<undefined>;

export type ChatControllerGetChatsVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchChatControllerGetChats = (
  variables: ChatControllerGetChatsVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ChatControllerGetChatsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/chat/chats", method: "get", ...variables, signal });

export const useChatControllerGetChats = <TData = undefined,>(
  variables: ChatControllerGetChatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ChatControllerGetChatsError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<undefined, ChatControllerGetChatsError, TData>({
    queryKey: queryKeyFn({
      path: "/api/chat/chats",
      operationId: "chatControllerGetChats",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchChatControllerGetChats({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ChatControllerGetMessagesPathParams = {
  id: string;
};

export type ChatControllerGetMessagesError = Fetcher.ErrorWrapper<undefined>;

export type ChatControllerGetMessagesVariables = {
  pathParams: ChatControllerGetMessagesPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchChatControllerGetMessages = (
  variables: ChatControllerGetMessagesVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ChatControllerGetMessagesError,
    undefined,
    {},
    {},
    ChatControllerGetMessagesPathParams
  >({
    url: "/api/chat/chat/{id}/messages",
    method: "get",
    ...variables,
    signal,
  });

export const useChatControllerGetMessages = <TData = undefined,>(
  variables: ChatControllerGetMessagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ChatControllerGetMessagesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<undefined, ChatControllerGetMessagesError, TData>({
    queryKey: queryKeyFn({
      path: "/api/chat/chat/{id}/messages",
      operationId: "chatControllerGetMessages",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchChatControllerGetMessages(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ChatControllerDeleteAllError = Fetcher.ErrorWrapper<undefined>;

export type ChatControllerDeleteAllVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchChatControllerDeleteAll = (
  variables: ChatControllerDeleteAllVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ChatControllerDeleteAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/chat/delete-all", method: "post", ...variables, signal });

export const useChatControllerDeleteAll = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChatControllerDeleteAllError,
      ChatControllerDeleteAllVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    ChatControllerDeleteAllError,
    ChatControllerDeleteAllVariables
  >({
    mutationFn: (variables: ChatControllerDeleteAllVariables) =>
      fetchChatControllerDeleteAll({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChatControllerGetMediaQueryParams = {
  id: string;
};

export type ChatControllerGetMediaError = Fetcher.ErrorWrapper<undefined>;

export type ChatControllerGetMediaVariables = {
  queryParams: ChatControllerGetMediaQueryParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchChatControllerGetMedia = (
  variables: ChatControllerGetMediaVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    ChatControllerGetMediaError,
    undefined,
    {},
    ChatControllerGetMediaQueryParams,
    {}
  >({ url: "/api/chat/media", method: "get", ...variables, signal });

export const useChatControllerGetMedia = <TData = undefined,>(
  variables: ChatControllerGetMediaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ChatControllerGetMediaError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<undefined, ChatControllerGetMediaError, TData>({
    queryKey: queryKeyFn({
      path: "/api/chat/media",
      operationId: "chatControllerGetMedia",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchChatControllerGetMedia({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type UserControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerCreateVariables = {
  body?: Schemas.CreateUserDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchUserControllerCreate = (
  variables: UserControllerCreateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    UserControllerCreateError,
    Schemas.CreateUserDto,
    {},
    {},
    {}
  >({ url: "/api/user", method: "post", ...variables, signal });

export const useUserControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerCreateError,
      UserControllerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerCreateError,
    UserControllerCreateVariables
  >({
    mutationFn: (variables: UserControllerCreateVariables) =>
      fetchUserControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UserControllerFindMeError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindMeVariables = ZapdiviserContext["fetcherOptions"];

export const fetchUserControllerFindMe = (
  variables: UserControllerFindMeVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<undefined, UserControllerFindMeError, undefined, {}, {}, {}>({
    url: "/api/user",
    method: "get",
    ...variables,
    signal,
  });

export const useUserControllerFindMe = <TData = undefined,>(
  variables: UserControllerFindMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, UserControllerFindMeError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<undefined, UserControllerFindMeError, TData>({
    queryKey: queryKeyFn({
      path: "/api/user",
      operationId: "userControllerFindMe",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserControllerFindMe({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type UserControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerUpdateVariables = {
  body?: Schemas.UpdateUserDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchUserControllerUpdate = (
  variables: UserControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    UserControllerUpdateError,
    Schemas.UpdateUserDto,
    {},
    {},
    {}
  >({ url: "/api/user", method: "patch", ...variables, signal });

export const useUserControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerUpdateError,
      UserControllerUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerUpdateError,
    UserControllerUpdateVariables
  >({
    mutationFn: (variables: UserControllerUpdateVariables) =>
      fetchUserControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UserControllerCreateRecoveryCodeError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerCreateRecoveryCodeVariables = {
  body?: Schemas.ForgetPasswordDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchUserControllerCreateRecoveryCode = (
  variables: UserControllerCreateRecoveryCodeVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    UserControllerCreateRecoveryCodeError,
    Schemas.ForgetPasswordDto,
    {},
    {},
    {}
  >({ url: "/api/user/forget-password", method: "post", ...variables, signal });

export const useUserControllerCreateRecoveryCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerCreateRecoveryCodeError,
      UserControllerCreateRecoveryCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerCreateRecoveryCodeError,
    UserControllerCreateRecoveryCodeVariables
  >({
    mutationFn: (variables: UserControllerCreateRecoveryCodeVariables) =>
      fetchUserControllerCreateRecoveryCode({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UserControllerCheckCodeError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerCheckCodeVariables = {
  body?: Schemas.CheckCodeDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchUserControllerCheckCode = (
  variables: UserControllerCheckCodeVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    UserControllerCheckCodeError,
    Schemas.CheckCodeDto,
    {},
    {},
    {}
  >({
    url: "/api/user/forget-password/check-code",
    method: "post",
    ...variables,
    signal,
  });

export const useUserControllerCheckCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerCheckCodeError,
      UserControllerCheckCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerCheckCodeError,
    UserControllerCheckCodeVariables
  >({
    mutationFn: (variables: UserControllerCheckCodeVariables) =>
      fetchUserControllerCheckCode({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UserControllerForgetPasswordWithCodeError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerForgetPasswordWithCodeVariables = {
  body?: Schemas.ForgetPasswordWithCodeDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchUserControllerForgetPasswordWithCode = (
  variables: UserControllerForgetPasswordWithCodeVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    UserControllerForgetPasswordWithCodeError,
    Schemas.ForgetPasswordWithCodeDto,
    {},
    {},
    {}
  >({
    url: "/api/user/forget-password/code",
    method: "post",
    ...variables,
    signal,
  });

export const useUserControllerForgetPasswordWithCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerForgetPasswordWithCodeError,
      UserControllerForgetPasswordWithCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerForgetPasswordWithCodeError,
    UserControllerForgetPasswordWithCodeVariables
  >({
    mutationFn: (variables: UserControllerForgetPasswordWithCodeVariables) =>
      fetchUserControllerForgetPasswordWithCode({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type UserControllerChangePasswordError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerChangePasswordVariables = {
  body?: Schemas.UpdatePasswordWithOldPasswordDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchUserControllerChangePassword = (
  variables: UserControllerChangePasswordVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    UserControllerChangePasswordError,
    Schemas.UpdatePasswordWithOldPasswordDto,
    {},
    {},
    {}
  >({
    url: "/api/user/change-password/old-password",
    method: "post",
    ...variables,
    signal,
  });

export const useUserControllerChangePassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerChangePasswordError,
      UserControllerChangePasswordVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerChangePasswordError,
    UserControllerChangePasswordVariables
  >({
    mutationFn: (variables: UserControllerChangePasswordVariables) =>
      fetchUserControllerChangePassword({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UserControllerChangePasswordWithTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerChangePasswordWithTokenVariables = {
  body?: Schemas.UpdatePasswordWithTokenDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchUserControllerChangePasswordWithToken = (
  variables: UserControllerChangePasswordWithTokenVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    UserControllerChangePasswordWithTokenError,
    Schemas.UpdatePasswordWithTokenDto,
    {},
    {},
    {}
  >({
    url: "/api/user/change-password/token",
    method: "post",
    ...variables,
    signal,
  });

export const useUserControllerChangePasswordWithToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerChangePasswordWithTokenError,
      UserControllerChangePasswordWithTokenVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerChangePasswordWithTokenError,
    UserControllerChangePasswordWithTokenVariables
  >({
    mutationFn: (variables: UserControllerChangePasswordWithTokenVariables) =>
      fetchUserControllerChangePasswordWithToken({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AuthControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerCreateVariables = {
  body?: Schemas.CreateUserDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchAuthControllerCreate = (
  variables: AuthControllerCreateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    AuthControllerCreateError,
    Schemas.CreateUserDto,
    {},
    {},
    {}
  >({ url: "/api/auth/register", method: "post", ...variables, signal });

export const useAuthControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AuthControllerCreateError,
      AuthControllerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    AuthControllerCreateError,
    AuthControllerCreateVariables
  >({
    mutationFn: (variables: AuthControllerCreateVariables) =>
      fetchAuthControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthControllerLoginError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerLoginVariables = ZapdiviserContext["fetcherOptions"];

export const fetchAuthControllerLogin = (
  variables: AuthControllerLoginVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<undefined, AuthControllerLoginError, undefined, {}, {}, {}>({
    url: "/api/auth/login",
    method: "post",
    ...variables,
    signal,
  });

export const useAuthControllerLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AuthControllerLoginError,
      AuthControllerLoginVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    AuthControllerLoginError,
    AuthControllerLoginVariables
  >({
    mutationFn: (variables: AuthControllerLoginVariables) =>
      fetchAuthControllerLogin({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RedirectsControllerRedirectPathParams = {
  slug: string;
};

export type RedirectsControllerRedirectError = Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerRedirectVariables = {
  pathParams: RedirectsControllerRedirectPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerRedirect = (
  variables: RedirectsControllerRedirectVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerRedirectError,
    undefined,
    {},
    {},
    RedirectsControllerRedirectPathParams
  >({ url: "/api/redirects/{slug}", method: "get", ...variables, signal });

export const useRedirectsControllerRedirect = <TData = undefined,>(
  variables: RedirectsControllerRedirectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      RedirectsControllerRedirectError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<
    undefined,
    RedirectsControllerRedirectError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/redirects/{slug}",
      operationId: "redirectsControllerRedirect",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRedirectsControllerRedirect(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type RedirectsControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerCreateVariables = {
  body?: Schemas.CreateRedirectDto;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerCreate = (
  variables: RedirectsControllerCreateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerCreateError,
    Schemas.CreateRedirectDto,
    {},
    {},
    {}
  >({ url: "/api/redirects", method: "post", ...variables, signal });

export const useRedirectsControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RedirectsControllerCreateError,
      RedirectsControllerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    RedirectsControllerCreateError,
    RedirectsControllerCreateVariables
  >({
    mutationFn: (variables: RedirectsControllerCreateVariables) =>
      fetchRedirectsControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RedirectsControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerFindAllVariables =
  ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerFindAll = (
  variables: RedirectsControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/redirects", method: "get", ...variables, signal });

export const useRedirectsControllerFindAll = <TData = undefined,>(
  variables: RedirectsControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      RedirectsControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<undefined, RedirectsControllerFindAllError, TData>(
    {
      queryKey: queryKeyFn({
        path: "/api/redirects",
        operationId: "redirectsControllerFindAll",
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchRedirectsControllerFindAll(
          { ...fetcherOptions, ...variables },
          signal,
        ),
      ...options,
      ...queryOptions,
    },
  );
};

export type RedirectsControllerCreateLinkPathParams = {
  id: string;
};

export type RedirectsControllerCreateLinkError =
  Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerCreateLinkVariables = {
  body?: Schemas.CreateRedirectLinkDto;
  pathParams: RedirectsControllerCreateLinkPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerCreateLink = (
  variables: RedirectsControllerCreateLinkVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerCreateLinkError,
    Schemas.CreateRedirectLinkDto,
    {},
    {},
    RedirectsControllerCreateLinkPathParams
  >({ url: "/api/redirects/{id}/link", method: "post", ...variables, signal });

export const useRedirectsControllerCreateLink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RedirectsControllerCreateLinkError,
      RedirectsControllerCreateLinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    RedirectsControllerCreateLinkError,
    RedirectsControllerCreateLinkVariables
  >({
    mutationFn: (variables: RedirectsControllerCreateLinkVariables) =>
      fetchRedirectsControllerCreateLink({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RedirectsControllerSlugAvailablePathParams = {
  slug: string;
};

export type RedirectsControllerSlugAvailableError =
  Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerSlugAvailableVariables = {
  pathParams: RedirectsControllerSlugAvailablePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerSlugAvailable = (
  variables: RedirectsControllerSlugAvailableVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerSlugAvailableError,
    undefined,
    {},
    {},
    RedirectsControllerSlugAvailablePathParams
  >({
    url: "/api/redirects/slug-available/{slug}",
    method: "get",
    ...variables,
    signal,
  });

export const useRedirectsControllerSlugAvailable = <TData = undefined,>(
  variables: RedirectsControllerSlugAvailableVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      RedirectsControllerSlugAvailableError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<
    undefined,
    RedirectsControllerSlugAvailableError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/redirects/slug-available/{slug}",
      operationId: "redirectsControllerSlugAvailable",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRedirectsControllerSlugAvailable(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type RedirectsControllerFindOnePathParams = {
  id: string;
};

export type RedirectsControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerFindOneVariables = {
  pathParams: RedirectsControllerFindOnePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerFindOne = (
  variables: RedirectsControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerFindOneError,
    undefined,
    {},
    {},
    RedirectsControllerFindOnePathParams
  >({ url: "/api/redirects/data/{id}", method: "get", ...variables, signal });

export const useRedirectsControllerFindOne = <TData = undefined,>(
  variables: RedirectsControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      RedirectsControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useZapdiviserContext(options);
  return reactQuery.useQuery<undefined, RedirectsControllerFindOneError, TData>(
    {
      queryKey: queryKeyFn({
        path: "/api/redirects/data/{id}",
        operationId: "redirectsControllerFindOne",
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchRedirectsControllerFindOne(
          { ...fetcherOptions, ...variables },
          signal,
        ),
      ...options,
      ...queryOptions,
    },
  );
};

export type RedirectsControllerUpdatePathParams = {
  id: string;
};

export type RedirectsControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerUpdateVariables = {
  body?: Schemas.UpdateRedirectDto;
  pathParams: RedirectsControllerUpdatePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerUpdate = (
  variables: RedirectsControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerUpdateError,
    Schemas.UpdateRedirectDto,
    {},
    {},
    RedirectsControllerUpdatePathParams
  >({ url: "/api/redirects/{id}", method: "patch", ...variables, signal });

export const useRedirectsControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RedirectsControllerUpdateError,
      RedirectsControllerUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    RedirectsControllerUpdateError,
    RedirectsControllerUpdateVariables
  >({
    mutationFn: (variables: RedirectsControllerUpdateVariables) =>
      fetchRedirectsControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RedirectsControllerRemovePathParams = {
  id: string;
};

export type RedirectsControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerRemoveVariables = {
  pathParams: RedirectsControllerRemovePathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerRemove = (
  variables: RedirectsControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerRemoveError,
    undefined,
    {},
    {},
    RedirectsControllerRemovePathParams
  >({ url: "/api/redirects/{id}", method: "delete", ...variables, signal });

export const useRedirectsControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RedirectsControllerRemoveError,
      RedirectsControllerRemoveVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    RedirectsControllerRemoveError,
    RedirectsControllerRemoveVariables
  >({
    mutationFn: (variables: RedirectsControllerRemoveVariables) =>
      fetchRedirectsControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RedirectsControllerUpdateLinkPathParams = {
  id: string;
  linkId: string;
};

export type RedirectsControllerUpdateLinkError =
  Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerUpdateLinkVariables = {
  body?: Schemas.UpdateRedirectLinkDto;
  pathParams: RedirectsControllerUpdateLinkPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerUpdateLink = (
  variables: RedirectsControllerUpdateLinkVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerUpdateLinkError,
    Schemas.UpdateRedirectLinkDto,
    {},
    {},
    RedirectsControllerUpdateLinkPathParams
  >({
    url: "/api/redirects/{id}/link/{linkId}",
    method: "patch",
    ...variables,
    signal,
  });

export const useRedirectsControllerUpdateLink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RedirectsControllerUpdateLinkError,
      RedirectsControllerUpdateLinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    RedirectsControllerUpdateLinkError,
    RedirectsControllerUpdateLinkVariables
  >({
    mutationFn: (variables: RedirectsControllerUpdateLinkVariables) =>
      fetchRedirectsControllerUpdateLink({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RedirectsControllerRemoveLinkPathParams = {
  linkId: string;
};

export type RedirectsControllerRemoveLinkError =
  Fetcher.ErrorWrapper<undefined>;

export type RedirectsControllerRemoveLinkVariables = {
  pathParams: RedirectsControllerRemoveLinkPathParams;
} & ZapdiviserContext["fetcherOptions"];

export const fetchRedirectsControllerRemoveLink = (
  variables: RedirectsControllerRemoveLinkVariables,
  signal?: AbortSignal,
) =>
  zapdiviserFetch<
    undefined,
    RedirectsControllerRemoveLinkError,
    undefined,
    {},
    {},
    RedirectsControllerRemoveLinkPathParams
  >({
    url: "/api/redirects/link/{linkId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useRedirectsControllerRemoveLink = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RedirectsControllerRemoveLinkError,
      RedirectsControllerRemoveLinkVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useZapdiviserContext();
  return reactQuery.useMutation<
    undefined,
    RedirectsControllerRemoveLinkError,
    RedirectsControllerRemoveLinkVariables
  >({
    mutationFn: (variables: RedirectsControllerRemoveLinkVariables) =>
      fetchRedirectsControllerRemoveLink({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/api/product";
      operationId: "productControllerFindAll";
      variables: ProductControllerFindAllVariables;
    }
  | {
      path: "/api/product/{id}";
      operationId: "productControllerFindOne";
      variables: ProductControllerFindOneVariables;
    }
  | {
      path: "/api/whatsapp";
      operationId: "whatsappControllerFindAll";
      variables: WhatsappControllerFindAllVariables;
    }
  | {
      path: "/api/whatsapp/{id}";
      operationId: "whatsappControllerFindOne";
      variables: WhatsappControllerFindOneVariables;
    }
  | {
      path: "/api/chat/chats";
      operationId: "chatControllerGetChats";
      variables: ChatControllerGetChatsVariables;
    }
  | {
      path: "/api/chat/chat/{id}/messages";
      operationId: "chatControllerGetMessages";
      variables: ChatControllerGetMessagesVariables;
    }
  | {
      path: "/api/chat/media";
      operationId: "chatControllerGetMedia";
      variables: ChatControllerGetMediaVariables;
    }
  | {
      path: "/api/user";
      operationId: "userControllerFindMe";
      variables: UserControllerFindMeVariables;
    }
  | {
      path: "/api/redirects/{slug}";
      operationId: "redirectsControllerRedirect";
      variables: RedirectsControllerRedirectVariables;
    }
  | {
      path: "/api/redirects";
      operationId: "redirectsControllerFindAll";
      variables: RedirectsControllerFindAllVariables;
    }
  | {
      path: "/api/redirects/slug-available/{slug}";
      operationId: "redirectsControllerSlugAvailable";
      variables: RedirectsControllerSlugAvailableVariables;
    }
  | {
      path: "/api/redirects/data/{id}";
      operationId: "redirectsControllerFindOne";
      variables: RedirectsControllerFindOneVariables;
    };
