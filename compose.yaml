version: "3.9"

services:
  traefik:
    image: traefik
    restart: unless-stopped
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --api
      - --certificatesresolvers.letsencryptresolver.acme.email=${EMAIL}
      - --certificatesresolvers.letsencryptresolver.acme.storage=/acme.json
      - --certificatesresolvers.letsencryptresolver.acme.tlschallenge=true
    ports:
      - 80:80
      - 443:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${TRAEFIK_DIR}/acme.json:/acme.json
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.admin.basicauth.users=${ADMIN_EMAIL}:${ADMIN_PASSWORD}
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.rule=Host(`traefik.${HOST}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=admin
      - traefik.http.routers.traefik.tls.certresolver=letsencryptresolver

  db:
    image: postgres:alpine
    networks:
      - internal
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data

  migrate:
    build:
      context: ./backend
    depends_on:
      - db
    networks:
      - internal
    command: ["sh", "-c", "node ./node_modules/typeorm/cli -d ./dist/ormconfig.js migration:run"]
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  redis:
    image: redis:alpine
    restart: always
    networks:
      - internal
    command: /bin/sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
    volumes:
      - redis:/data

  minio:
    image: minio/minio
    volumes:
      - "minio:/data"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    networks:
      - internal
      - traefik
    command: server /data --console-address :9001
    restart: unless-stopped
    labels:
      traefik.enable: true

      traefik.http.routers.minio-api.rule: Host(`minio-api.${HOST}`)
      traefik.http.routers.minio-api.service: noop@internal
      traefik.http.services.minio-api.loadbalancer.server.port: 9000

      traefik.http.routers.minio.rule: Host(`minio.${HOST}`)
      traefik.http.routers.minio.service: noop@internal
      traefik.http.services.minio.loadbalancer.server.port: 9001

  setup-minio:
    image: minio/mc
    depends_on:
      - minio
    networks:
      - internal
    entrypoint:
      - sh
      - -c
      - |
        until mc ls minio > /dev/null 2>&1; do
          sleep 0.5
        done

        mc alias set minio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD}
        mc admin user svcacct add minio ${MINIO_USER} --access-key ${MINIO_ACCESS_KEY} --secret-key ${MINIO_SECRET_KEY}
        mc mb minio/zapdiviser

networks:
  traefik:
    external: true
  internal:

volumes:
  redis:
  postgres:
  minio:
