services:
  frontend:
    build:
      context: ./frontend
    command: --brotli
    networks:
      - internal
      - caddy
    depends_on:
      - backend
    environment:
      VITE_BACKEND_URL: backend.${HOST}
    labels:
      caddy_0: ${HOST}
      caddy_0.reverse_proxy: "{{upstreams 8080}}"
      caddy_1: www.${HOST}
      caddy_1.redir: https://${HOST}{uri}

  backend:
    build:
      context: ./backend
    networks:
      - internal
      - caddy
    depends_on:
      - db
      - redis
      - minio
    environment:
      HOST: ${HOST}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      MINIO_USER: ${MINIO_USER}
      MINIO_PASSWORD: ${MINIO_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      caddy_0: backend.${HOST}
      caddy_0.reverse_proxy: "{{upstreams 8000}}"
      caddy_1: webhook.${HOST}
      caddy_1.rewrite: "* /api/product/webhook{uri}"
      caddy_1.reverse_proxy: "{{upstreams 8000}}"
      caddy_2: redirect.${HOST}
      caddy_2.rewrite: "* /api/redirects{uri}"
      caddy_2.reverse_proxy: "{{upstreams 8000}}"
      caddy_3: admin.${HOST}
      caddy_3.redir: "/ /admin-br"
      caddy_3.reverse_proxy: "{{upstreams 8000}}"
